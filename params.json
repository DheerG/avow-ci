{"name":"Avow-ci","tagline":"Simple. Open. Continuous Integration.","body":"<img src=\"public/assets/images/avow-bar.png\" width=\"100%\">\r\n\r\n### Simple. Open. Continuous Integration.\r\n\r\n<img align=\"right\" src=\"avow-demo.gif\">\r\n\r\nA simple yet powerful open-source CI system for individual developers, small teams\r\nand dev shops, specifically designed for JavaScript projects.\r\n\r\nAvow is built for customization - creating continuous integration (and deployment)\r\nthat fits your specific need. It's easy to hack on and makes it simple to crete\r\nsolutions that fit your needs.\r\n\r\n## Requirements\r\n\r\n* [NodeJS](http://nodejs.org) v.0.9.0 (or better)\r\n* [MongoDB](http://www.mongodb.com/) locally or via a service such as [MongoLab](http://mongolab.com)\r\n\r\n## Installation\r\n\r\n1.) After cloning or downloading the contents of the Avow system to your server run\r\n`npm install` to get all dependencies.\r\n\r\n*Note: If you're planning to run in dev mode (i.e. `node index.js`) you need to\r\nadditionally run `npm install grunt-cli -g`.\r\n\r\n2.) In the root of the directory create a file `db_conf.json`:\r\n\r\n```json\r\n{\r\n  \"adapter\": \"mongo\",\r\n  \"config\": {\r\n    \"host\": \"[MONGO_HOST]\",\r\n    \"database\": \"[DATABASE]\",\r\n    \"user\": \"[USER]\",\r\n    \"pass\": \"[PASSWORD]\"\r\n  }\r\n}\r\n```\r\n\r\nReplacing the `[VARIABLES]` with your Mongo connection information.\r\n\r\n3.) Create a user by running the following command:\r\n\r\n```\r\nnode adduser.js [user@email.com] [password]\r\n```\r\n\r\nThis will create a user based on the email address and password provided\r\n\r\n4.) Start the service:\r\n\r\n```\r\nnpm run prod\r\n```\r\n\r\n## Configuring Mail Service\r\n\r\nAvow has the ability to send email notifications to users when a build fails. To\r\nenable this capability you must create a `mail_conf.json` file in the root:\r\n\r\n```json\r\n{\r\n    \"server\": \"[AVOW_SERVER]\",\r\n    \"host\": \"[SMTP_SERVER]\",\r\n    \"secureConnection\": true,\r\n    \"port\": 465,\r\n    \"auth\": {\r\n        \"user\": \"[SMTP_EMAIL]\",\r\n        \"pass\": \"[SMTP_PASSWORD]\"\r\n    },\r\n    \"maxConnections\": 5,\r\n    \"maxMessages\": null\r\n}\r\n```\r\n\r\n*Note: the `AVOW_SERVER` refers to the FQDN/IP for your Avow instance. This is used\r\nto build return links from the outgoing email back to the failing build and should\r\nbe formatted like: `http://yourserver.com:8181`.*\r\n\r\n## Accessing the Web App\r\n\r\nThe default port (which can be changed in `/config.js`) is `8181`, so when the\r\nserver is running you can access the web app via `http://yourserver.com:8181`.\r\n\r\nYou can then log in with the email address and password you created during installation.\r\n\r\n## Configuring Projects\r\n\r\nProjects utilize an `avow.json` file in their root directory to inform the build\r\nprocess of tasks to run. This file needs to be added to any project's repository\r\nwhich will be added to the system.\r\n\r\nA simple example of the `avow.json` file can be seen below:\r\n\r\n```json\r\n{\r\n    \"tasks\": [\r\n        \"npm install\",\r\n        \"grunt\"\r\n    ]\r\n}\r\n```\r\n\r\nThe above would clone the repo and then run the tasks (in order) to complete the\r\nbuild.\r\n\r\nOnce the project has an `avow.json` configuration it can be added to the system:\r\n\r\nFrom the main (Project List) screen you can click \"New Project\" to add a new\r\nproject to the system. The \"Project Config\" screen will ask for 3 things:\r\n\r\n1. **Name:** This should consist of letters, numbers, and hyphens only and is used to reference the project\r\n2. **Repo:** The SSH repository clone URL\r\n3. **Branch:** If a valid SSH repo URL is supplied this will be a dropdown with the list of available branches\r\n\r\nIf the project is in a private repository you will need to add a deploy key. You\r\ncan simply use the server's `.ssh/id_rsa.pub` key for this (if it exists) or\r\n[generate one](https://help.github.com/articles/generating-ssh-keys).\r\n\r\nOnce you have a deploy key simply add it to the repository in GitHub under the\r\nSettings >> Deploy Keys.\r\n\r\nAlternatively, if you are running multiple repos (not just multiple branches) it\r\nmay be easier to associate the server's pub-key with your Github account, or create\r\na Github account for your server which has access to the repos you will be adding.\r\n\r\n## Running Builds\r\n\r\nThere are two ways to run builds through Avow:\r\n\r\n### Manual Run:\r\n\r\nIn the main \"Project List\" screen you can manually run a build by clicking the icon\r\nin the \"Build\" column. This will start the build then direct you to the build page\r\nwhere the build can be monitored.\r\n\r\n### GitHub WebHook:\r\n\r\nFor the project to run whenever a commit is pushed to the repo + branch you can\r\nadd a webhook in GitHub under the Project Settings >> Webhooks & Services with the\r\nfollowing settings:\r\n\r\n| **Payload URL**                         | **Payload Version**              |\r\n|-----------------------------------------|----------------------------------|\r\n| `http://yourserver.com:8181/api/build/` | `application/vnd.github.v3+form` |\r\n\r\nOnce these settings are in place the system will automatically process incoming\r\nwebhook `POST`'s and execute a build.\r\n\r\n## License\r\n\r\nThis software is released as-is, without warranty under the MIT-Style license.\r\n","google":"UA-49700564-1","note":"Don't delete this file! It's used internally to help with page regeneration."}